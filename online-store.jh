entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee{job} to Job,
	/**
	* A relationship
	*/
	Department{employee} to
	/**
	* Another side of the same relationship
	*/
	Employee
}

/** Product sold by the online store */
entity Product {
	name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
	S, M, L, XL, XXL 
}

entity ProductCategory {
	name String required
    description String
}

entity Customer {
	firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
	MALE, FEMALE, OTHER
}

entity ProductOrder {
	placedDate Instant required
    status OrderStatus required
    code String required
}

enum OrderStatus {
	COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
	quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
	AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

entity Invoice {
	date Instant required
	details String
	status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
	PAID, ISSUED, CANCELLED
}

enum PaymentMethod {
	CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

entity Shipment {
	trackingCode String
    date Instant required
    details String
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

relationship OneToOne {
	Customer{user} to User
}

relationship ManyToOne {
	OrderItem{product} to Product
}

relationship OneToMany {
	Customer{order} to ProductOrder{customer}
    ProductOrder{orderItem} to OrderItem{order}
    ProductOrder{invoice} to Invoice{order}
    Invoice{shipment} to Shipment{invoice}
    ProductCategory{product} to Product{productCategory}
}

service * with serviceClass
paginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
